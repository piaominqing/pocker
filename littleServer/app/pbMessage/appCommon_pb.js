/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.C2SHandshakeReq', null, global);
goog.exportSymbol('proto.CardInfo', null, global);
goog.exportSymbol('proto.Cmd', null, global);
goog.exportSymbol('proto.DeskInitInfo', null, global);
goog.exportSymbol('proto.DeskStatus', null, global);
goog.exportSymbol('proto.DeskUpdateNty', null, global);
goog.exportSymbol('proto.ErrCode', null, global);
goog.exportSymbol('proto.GameOverNty', null, global);
goog.exportSymbol('proto.JoinGameReq', null, global);
goog.exportSymbol('proto.JoinGameRsp', null, global);
goog.exportSymbol('proto.PlayCardNty', null, global);
goog.exportSymbol('proto.PlayCardReq', null, global);
goog.exportSymbol('proto.PlayCardRsp', null, global);
goog.exportSymbol('proto.PlayerInfo', null, global);
goog.exportSymbol('proto.PlayerStatus', null, global);
goog.exportSymbol('proto.RobLandInfoNty', null, global);
goog.exportSymbol('proto.RobLandReq', null, global);
goog.exportSymbol('proto.RobLandRsp', null, global);
goog.exportSymbol('proto.RspHead', null, global);
goog.exportSymbol('proto.S2CCommonRsp', null, global);
goog.exportSymbol('proto.S2CHandshakeRsp', null, global);
goog.exportSymbol('proto.SetLandLordNty', null, global);
goog.exportSymbol('proto.StartGameNty', null, global);
goog.exportSymbol('proto.StartGameReq', null, global);
goog.exportSymbol('proto.StartGameRsp', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RspHead = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RspHead, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RspHead.displayName = 'proto.RspHead';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RspHead.prototype.toObject = function(opt_includeInstance) {
  return proto.RspHead.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RspHead} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RspHead.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getField(msg, 1),
    des: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RspHead}
 */
proto.RspHead.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RspHead;
  return proto.RspHead.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RspHead} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RspHead}
 */
proto.RspHead.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RspHead.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RspHead.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RspHead} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RspHead.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.RspHead.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.RspHead.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.RspHead.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RspHead.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string des = 2;
 * @return {string}
 */
proto.RspHead.prototype.getDes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RspHead.prototype.setDes = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.RspHead.prototype.clearDes = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RspHead.prototype.hasDes = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.C2SHandshakeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.C2SHandshakeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.C2SHandshakeReq.displayName = 'proto.C2SHandshakeReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.C2SHandshakeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.C2SHandshakeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.C2SHandshakeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SHandshakeReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.C2SHandshakeReq}
 */
proto.C2SHandshakeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.C2SHandshakeReq;
  return proto.C2SHandshakeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.C2SHandshakeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.C2SHandshakeReq}
 */
proto.C2SHandshakeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.C2SHandshakeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.C2SHandshakeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.C2SHandshakeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.C2SHandshakeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2CHandshakeRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.S2CHandshakeRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.S2CHandshakeRsp.displayName = 'proto.S2CHandshakeRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2CHandshakeRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.S2CHandshakeRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2CHandshakeRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CHandshakeRsp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2CHandshakeRsp}
 */
proto.S2CHandshakeRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2CHandshakeRsp;
  return proto.S2CHandshakeRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2CHandshakeRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2CHandshakeRsp}
 */
proto.S2CHandshakeRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2CHandshakeRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2CHandshakeRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2CHandshakeRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CHandshakeRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.S2CCommonRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.S2CCommonRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.S2CCommonRsp.displayName = 'proto.S2CCommonRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.S2CCommonRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.S2CCommonRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.S2CCommonRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CCommonRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    rspHead: (f = msg.getRspHead()) && proto.RspHead.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.S2CCommonRsp}
 */
proto.S2CCommonRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.S2CCommonRsp;
  return proto.S2CCommonRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.S2CCommonRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.S2CCommonRsp}
 */
proto.S2CCommonRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RspHead;
      reader.readMessage(value,proto.RspHead.deserializeBinaryFromReader);
      msg.setRspHead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.S2CCommonRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.S2CCommonRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.S2CCommonRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.S2CCommonRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRspHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RspHead.serializeBinaryToWriter
    );
  }
};


/**
 * optional RspHead rsp_head = 1;
 * @return {?proto.RspHead}
 */
proto.S2CCommonRsp.prototype.getRspHead = function() {
  return /** @type{?proto.RspHead} */ (
    jspb.Message.getWrapperField(this, proto.RspHead, 1));
};


/** @param {?proto.RspHead|undefined} value */
proto.S2CCommonRsp.prototype.setRspHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.S2CCommonRsp.prototype.clearRspHead = function() {
  this.setRspHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.S2CCommonRsp.prototype.hasRspHead = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JoinGameReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JoinGameReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.JoinGameReq.displayName = 'proto.JoinGameReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JoinGameReq.prototype.toObject = function(opt_includeInstance) {
  return proto.JoinGameReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JoinGameReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinGameReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1),
    avatarUrl: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JoinGameReq}
 */
proto.JoinGameReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JoinGameReq;
  return proto.JoinGameReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JoinGameReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JoinGameReq}
 */
proto.JoinGameReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JoinGameReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JoinGameReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JoinGameReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinGameReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.JoinGameReq.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.JoinGameReq.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.JoinGameReq.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.JoinGameReq.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string avatar_url = 2;
 * @return {string}
 */
proto.JoinGameReq.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.JoinGameReq.prototype.setAvatarUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.JoinGameReq.prototype.clearAvatarUrl = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.JoinGameReq.prototype.hasAvatarUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JoinGameRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.JoinGameRsp.repeatedFields_, null);
};
goog.inherits(proto.JoinGameRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.JoinGameRsp.displayName = 'proto.JoinGameRsp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.JoinGameRsp.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JoinGameRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.JoinGameRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JoinGameRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinGameRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    rspHead: (f = msg.getRspHead()) && proto.RspHead.toObject(includeInstance, f),
    deskNo: jspb.Message.getField(msg, 2),
    seatNo: jspb.Message.getField(msg, 3),
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.PlayerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JoinGameRsp}
 */
proto.JoinGameRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JoinGameRsp;
  return proto.JoinGameRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JoinGameRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JoinGameRsp}
 */
proto.JoinGameRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RspHead;
      reader.readMessage(value,proto.RspHead.deserializeBinaryFromReader);
      msg.setRspHead(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeskNo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatNo(value);
      break;
    case 4:
      var value = new proto.PlayerInfo;
      reader.readMessage(value,proto.PlayerInfo.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JoinGameRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JoinGameRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JoinGameRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinGameRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRspHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RspHead.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.PlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional RspHead rsp_head = 1;
 * @return {?proto.RspHead}
 */
proto.JoinGameRsp.prototype.getRspHead = function() {
  return /** @type{?proto.RspHead} */ (
    jspb.Message.getWrapperField(this, proto.RspHead, 1));
};


/** @param {?proto.RspHead|undefined} value */
proto.JoinGameRsp.prototype.setRspHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.JoinGameRsp.prototype.clearRspHead = function() {
  this.setRspHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.JoinGameRsp.prototype.hasRspHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string desk_no = 2;
 * @return {string}
 */
proto.JoinGameRsp.prototype.getDeskNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.JoinGameRsp.prototype.setDeskNo = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.JoinGameRsp.prototype.clearDeskNo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.JoinGameRsp.prototype.hasDeskNo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string seat_no = 3;
 * @return {string}
 */
proto.JoinGameRsp.prototype.getSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.JoinGameRsp.prototype.setSeatNo = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.JoinGameRsp.prototype.clearSeatNo = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.JoinGameRsp.prototype.hasSeatNo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated PlayerInfo players = 4;
 * @return {!Array.<!proto.PlayerInfo>}
 */
proto.JoinGameRsp.prototype.getPlayersList = function() {
  return /** @type{!Array.<!proto.PlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PlayerInfo, 4));
};


/** @param {!Array.<!proto.PlayerInfo>} value */
proto.JoinGameRsp.prototype.setPlayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.PlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PlayerInfo}
 */
proto.JoinGameRsp.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.PlayerInfo, opt_index);
};


proto.JoinGameRsp.prototype.clearPlayersList = function() {
  this.setPlayersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StartGameReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StartGameReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StartGameReq.displayName = 'proto.StartGameReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StartGameReq.prototype.toObject = function(opt_includeInstance) {
  return proto.StartGameReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StartGameReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StartGameReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StartGameReq}
 */
proto.StartGameReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StartGameReq;
  return proto.StartGameReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StartGameReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StartGameReq}
 */
proto.StartGameReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StartGameReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StartGameReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StartGameReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StartGameReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StartGameRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StartGameRsp.repeatedFields_, null);
};
goog.inherits(proto.StartGameRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StartGameRsp.displayName = 'proto.StartGameRsp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StartGameRsp.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StartGameRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.StartGameRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StartGameRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StartGameRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    rspHead: (f = msg.getRspHead()) && proto.RspHead.toObject(includeInstance, f),
    deskNo: jspb.Message.getField(msg, 2),
    seatNo: jspb.Message.getField(msg, 3),
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.PlayerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StartGameRsp}
 */
proto.StartGameRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StartGameRsp;
  return proto.StartGameRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StartGameRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StartGameRsp}
 */
proto.StartGameRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RspHead;
      reader.readMessage(value,proto.RspHead.deserializeBinaryFromReader);
      msg.setRspHead(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeskNo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatNo(value);
      break;
    case 4:
      var value = new proto.PlayerInfo;
      reader.readMessage(value,proto.PlayerInfo.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StartGameRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StartGameRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StartGameRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StartGameRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRspHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RspHead.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.PlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional RspHead rsp_head = 1;
 * @return {?proto.RspHead}
 */
proto.StartGameRsp.prototype.getRspHead = function() {
  return /** @type{?proto.RspHead} */ (
    jspb.Message.getWrapperField(this, proto.RspHead, 1));
};


/** @param {?proto.RspHead|undefined} value */
proto.StartGameRsp.prototype.setRspHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.StartGameRsp.prototype.clearRspHead = function() {
  this.setRspHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StartGameRsp.prototype.hasRspHead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string desk_no = 2;
 * @return {string}
 */
proto.StartGameRsp.prototype.getDeskNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.StartGameRsp.prototype.setDeskNo = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.StartGameRsp.prototype.clearDeskNo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StartGameRsp.prototype.hasDeskNo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string seat_no = 3;
 * @return {string}
 */
proto.StartGameRsp.prototype.getSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.StartGameRsp.prototype.setSeatNo = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.StartGameRsp.prototype.clearSeatNo = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StartGameRsp.prototype.hasSeatNo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated PlayerInfo players = 4;
 * @return {!Array.<!proto.PlayerInfo>}
 */
proto.StartGameRsp.prototype.getPlayersList = function() {
  return /** @type{!Array.<!proto.PlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PlayerInfo, 4));
};


/** @param {!Array.<!proto.PlayerInfo>} value */
proto.StartGameRsp.prototype.setPlayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.PlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PlayerInfo}
 */
proto.StartGameRsp.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.PlayerInfo, opt_index);
};


proto.StartGameRsp.prototype.clearPlayersList = function() {
  this.setPlayersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeskInitInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DeskInitInfo.repeatedFields_, null);
};
goog.inherits(proto.DeskInitInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeskInitInfo.displayName = 'proto.DeskInitInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DeskInitInfo.repeatedFields_ = [3,8,13,14,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeskInitInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.DeskInitInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeskInitInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeskInitInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deskNo: jspb.Message.getField(msg, 1),
    seatNo: jspb.Message.getField(msg, 2),
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.PlayerInfo.toObject, includeInstance),
    preSeatNo: jspb.Message.getField(msg, 4),
    nextSeatNo: jspb.Message.getField(msg, 5),
    curDeskStatus: jspb.Message.getField(msg, 6),
    curRobSeatNo: jspb.Message.getField(msg, 7),
    robListList: jspb.Message.getRepeatedField(msg, 8),
    landLordSeatNo: jspb.Message.getField(msg, 9),
    roundWinSeatNo: jspb.Message.getField(msg, 10),
    nextPlayCardSeat: jspb.Message.getField(msg, 11),
    deskRate: jspb.Message.getField(msg, 12),
    cardsList: jspb.Message.toObjectList(msg.getCardsList(),
    proto.CardInfo.toObject, includeInstance),
    hiddenCardsList: jspb.Message.toObjectList(msg.getHiddenCardsList(),
    proto.CardInfo.toObject, includeInstance),
    winCardsList: jspb.Message.toObjectList(msg.getWinCardsList(),
    proto.CardInfo.toObject, includeInstance),
    isAudience: jspb.Message.getField(msg, 16)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeskInitInfo}
 */
proto.DeskInitInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeskInitInfo;
  return proto.DeskInitInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeskInitInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeskInitInfo}
 */
proto.DeskInitInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeskNo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatNo(value);
      break;
    case 3:
      var value = new proto.PlayerInfo;
      reader.readMessage(value,proto.PlayerInfo.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreSeatNo(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextSeatNo(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurDeskStatus(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurRobSeatNo(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addRobList(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLandLordSeatNo(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoundWinSeatNo(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPlayCardSeat(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeskRate(value);
      break;
    case 13:
      var value = new proto.CardInfo;
      reader.readMessage(value,proto.CardInfo.deserializeBinaryFromReader);
      msg.addCards(value);
      break;
    case 14:
      var value = new proto.CardInfo;
      reader.readMessage(value,proto.CardInfo.deserializeBinaryFromReader);
      msg.addHiddenCards(value);
      break;
    case 15:
      var value = new proto.CardInfo;
      reader.readMessage(value,proto.CardInfo.deserializeBinaryFromReader);
      msg.addWinCards(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAudience(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeskInitInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeskInitInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeskInitInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeskInitInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.PlayerInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRobListList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.CardInfo.serializeBinaryToWriter
    );
  }
  f = message.getHiddenCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.CardInfo.serializeBinaryToWriter
    );
  }
  f = message.getWinCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.CardInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
};


/**
 * optional string desk_no = 1;
 * @return {string}
 */
proto.DeskInitInfo.prototype.getDeskNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.DeskInitInfo.prototype.setDeskNo = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DeskInitInfo.prototype.clearDeskNo = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeskInitInfo.prototype.hasDeskNo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string seat_no = 2;
 * @return {string}
 */
proto.DeskInitInfo.prototype.getSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.DeskInitInfo.prototype.setSeatNo = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.DeskInitInfo.prototype.clearSeatNo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeskInitInfo.prototype.hasSeatNo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated PlayerInfo players = 3;
 * @return {!Array.<!proto.PlayerInfo>}
 */
proto.DeskInitInfo.prototype.getPlayersList = function() {
  return /** @type{!Array.<!proto.PlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PlayerInfo, 3));
};


/** @param {!Array.<!proto.PlayerInfo>} value */
proto.DeskInitInfo.prototype.setPlayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.PlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PlayerInfo}
 */
proto.DeskInitInfo.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.PlayerInfo, opt_index);
};


proto.DeskInitInfo.prototype.clearPlayersList = function() {
  this.setPlayersList([]);
};


/**
 * optional string pre_seat_no = 4;
 * @return {string}
 */
proto.DeskInitInfo.prototype.getPreSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.DeskInitInfo.prototype.setPreSeatNo = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.DeskInitInfo.prototype.clearPreSeatNo = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeskInitInfo.prototype.hasPreSeatNo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string next_seat_no = 5;
 * @return {string}
 */
proto.DeskInitInfo.prototype.getNextSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.DeskInitInfo.prototype.setNextSeatNo = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.DeskInitInfo.prototype.clearNextSeatNo = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeskInitInfo.prototype.hasNextSeatNo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 cur_desk_status = 6;
 * @return {number}
 */
proto.DeskInitInfo.prototype.getCurDeskStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.DeskInitInfo.prototype.setCurDeskStatus = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.DeskInitInfo.prototype.clearCurDeskStatus = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeskInitInfo.prototype.hasCurDeskStatus = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string cur_rob_seat_no = 7;
 * @return {string}
 */
proto.DeskInitInfo.prototype.getCurRobSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.DeskInitInfo.prototype.setCurRobSeatNo = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.DeskInitInfo.prototype.clearCurRobSeatNo = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeskInitInfo.prototype.hasCurRobSeatNo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated string rob_list = 8;
 * @return {!Array.<string>}
 */
proto.DeskInitInfo.prototype.getRobListList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array.<string>} value */
proto.DeskInitInfo.prototype.setRobListList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.DeskInitInfo.prototype.addRobList = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.DeskInitInfo.prototype.clearRobListList = function() {
  this.setRobListList([]);
};


/**
 * optional string land_lord_seat_no = 9;
 * @return {string}
 */
proto.DeskInitInfo.prototype.getLandLordSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.DeskInitInfo.prototype.setLandLordSeatNo = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.DeskInitInfo.prototype.clearLandLordSeatNo = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeskInitInfo.prototype.hasLandLordSeatNo = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string round_win_seat_no = 10;
 * @return {string}
 */
proto.DeskInitInfo.prototype.getRoundWinSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.DeskInitInfo.prototype.setRoundWinSeatNo = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.DeskInitInfo.prototype.clearRoundWinSeatNo = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeskInitInfo.prototype.hasRoundWinSeatNo = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string next_play_card_seat = 11;
 * @return {string}
 */
proto.DeskInitInfo.prototype.getNextPlayCardSeat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.DeskInitInfo.prototype.setNextPlayCardSeat = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.DeskInitInfo.prototype.clearNextPlayCardSeat = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeskInitInfo.prototype.hasNextPlayCardSeat = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint32 desk_rate = 12;
 * @return {number}
 */
proto.DeskInitInfo.prototype.getDeskRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.DeskInitInfo.prototype.setDeskRate = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.DeskInitInfo.prototype.clearDeskRate = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeskInitInfo.prototype.hasDeskRate = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated CardInfo cards = 13;
 * @return {!Array.<!proto.CardInfo>}
 */
proto.DeskInitInfo.prototype.getCardsList = function() {
  return /** @type{!Array.<!proto.CardInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CardInfo, 13));
};


/** @param {!Array.<!proto.CardInfo>} value */
proto.DeskInitInfo.prototype.setCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.CardInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CardInfo}
 */
proto.DeskInitInfo.prototype.addCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.CardInfo, opt_index);
};


proto.DeskInitInfo.prototype.clearCardsList = function() {
  this.setCardsList([]);
};


/**
 * repeated CardInfo hidden_cards = 14;
 * @return {!Array.<!proto.CardInfo>}
 */
proto.DeskInitInfo.prototype.getHiddenCardsList = function() {
  return /** @type{!Array.<!proto.CardInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CardInfo, 14));
};


/** @param {!Array.<!proto.CardInfo>} value */
proto.DeskInitInfo.prototype.setHiddenCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.CardInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CardInfo}
 */
proto.DeskInitInfo.prototype.addHiddenCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.CardInfo, opt_index);
};


proto.DeskInitInfo.prototype.clearHiddenCardsList = function() {
  this.setHiddenCardsList([]);
};


/**
 * repeated CardInfo win_cards = 15;
 * @return {!Array.<!proto.CardInfo>}
 */
proto.DeskInitInfo.prototype.getWinCardsList = function() {
  return /** @type{!Array.<!proto.CardInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CardInfo, 15));
};


/** @param {!Array.<!proto.CardInfo>} value */
proto.DeskInitInfo.prototype.setWinCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.CardInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CardInfo}
 */
proto.DeskInitInfo.prototype.addWinCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.CardInfo, opt_index);
};


proto.DeskInitInfo.prototype.clearWinCardsList = function() {
  this.setWinCardsList([]);
};


/**
 * optional bool is_audience = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DeskInitInfo.prototype.getIsAudience = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, false));
};


/** @param {boolean} value */
proto.DeskInitInfo.prototype.setIsAudience = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.DeskInitInfo.prototype.clearIsAudience = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeskInitInfo.prototype.hasIsAudience = function() {
  return jspb.Message.getField(this, 16) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PlayerInfo.repeatedFields_, null);
};
goog.inherits(proto.PlayerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlayerInfo.displayName = 'proto.PlayerInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PlayerInfo.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2),
    isReady: jspb.Message.getField(msg, 3),
    deskNo: jspb.Message.getField(msg, 4),
    seatNo: jspb.Message.getField(msg, 5),
    preSeatNo: jspb.Message.getField(msg, 6),
    nextSeatNo: jspb.Message.getField(msg, 7),
    score: jspb.Message.getField(msg, 8),
    cardCount: jspb.Message.getField(msg, 9),
    robLandScore: jspb.Message.getField(msg, 10),
    avatarUrl: jspb.Message.getField(msg, 11),
    lastPlayCardsList: jspb.Message.toObjectList(msg.getLastPlayCardsList(),
    proto.CardInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerInfo}
 */
proto.PlayerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerInfo;
  return proto.PlayerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerInfo}
 */
proto.PlayerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsReady(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeskNo(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeatNo(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreSeatNo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextSeatNo(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCardCount(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRobLandScore(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 12:
      var value = new proto.CardInfo;
      reader.readMessage(value,proto.CardInfo.deserializeBinaryFromReader);
      msg.addLastPlayCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getLastPlayCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.CardInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.PlayerInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.PlayerInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.PlayerInfo.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayerInfo.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 uid = 2;
 * @return {number}
 */
proto.PlayerInfo.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PlayerInfo.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.PlayerInfo.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayerInfo.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_ready = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PlayerInfo.prototype.getIsReady = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.PlayerInfo.prototype.setIsReady = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.PlayerInfo.prototype.clearIsReady = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayerInfo.prototype.hasIsReady = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string desk_no = 4;
 * @return {string}
 */
proto.PlayerInfo.prototype.getDeskNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.PlayerInfo.prototype.setDeskNo = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.PlayerInfo.prototype.clearDeskNo = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayerInfo.prototype.hasDeskNo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string seat_no = 5;
 * @return {string}
 */
proto.PlayerInfo.prototype.getSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.PlayerInfo.prototype.setSeatNo = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.PlayerInfo.prototype.clearSeatNo = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayerInfo.prototype.hasSeatNo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string pre_seat_no = 6;
 * @return {string}
 */
proto.PlayerInfo.prototype.getPreSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.PlayerInfo.prototype.setPreSeatNo = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.PlayerInfo.prototype.clearPreSeatNo = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayerInfo.prototype.hasPreSeatNo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string next_seat_no = 7;
 * @return {string}
 */
proto.PlayerInfo.prototype.getNextSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.PlayerInfo.prototype.setNextSeatNo = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.PlayerInfo.prototype.clearNextSeatNo = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayerInfo.prototype.hasNextSeatNo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 score = 8;
 * @return {number}
 */
proto.PlayerInfo.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.PlayerInfo.prototype.setScore = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.PlayerInfo.prototype.clearScore = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayerInfo.prototype.hasScore = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 card_count = 9;
 * @return {number}
 */
proto.PlayerInfo.prototype.getCardCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.PlayerInfo.prototype.setCardCount = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.PlayerInfo.prototype.clearCardCount = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayerInfo.prototype.hasCardCount = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 rob_land_score = 10;
 * @return {number}
 */
proto.PlayerInfo.prototype.getRobLandScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.PlayerInfo.prototype.setRobLandScore = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.PlayerInfo.prototype.clearRobLandScore = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayerInfo.prototype.hasRobLandScore = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string avatar_url = 11;
 * @return {string}
 */
proto.PlayerInfo.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.PlayerInfo.prototype.setAvatarUrl = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.PlayerInfo.prototype.clearAvatarUrl = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayerInfo.prototype.hasAvatarUrl = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated CardInfo last_play_cards = 12;
 * @return {!Array.<!proto.CardInfo>}
 */
proto.PlayerInfo.prototype.getLastPlayCardsList = function() {
  return /** @type{!Array.<!proto.CardInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CardInfo, 12));
};


/** @param {!Array.<!proto.CardInfo>} value */
proto.PlayerInfo.prototype.setLastPlayCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.CardInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CardInfo}
 */
proto.PlayerInfo.prototype.addLastPlayCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.CardInfo, opt_index);
};


proto.PlayerInfo.prototype.clearLastPlayCardsList = function() {
  this.setLastPlayCardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StartGameNty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StartGameNty.repeatedFields_, null);
};
goog.inherits(proto.StartGameNty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StartGameNty.displayName = 'proto.StartGameNty';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StartGameNty.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StartGameNty.prototype.toObject = function(opt_includeInstance) {
  return proto.StartGameNty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StartGameNty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StartGameNty.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstRob: jspb.Message.getField(msg, 1),
    cardsList: jspb.Message.toObjectList(msg.getCardsList(),
    proto.CardInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StartGameNty}
 */
proto.StartGameNty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StartGameNty;
  return proto.StartGameNty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StartGameNty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StartGameNty}
 */
proto.StartGameNty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstRob(value);
      break;
    case 2:
      var value = new proto.CardInfo;
      reader.readMessage(value,proto.CardInfo.deserializeBinaryFromReader);
      msg.addCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StartGameNty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StartGameNty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StartGameNty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StartGameNty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.CardInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string first_rob = 1;
 * @return {string}
 */
proto.StartGameNty.prototype.getFirstRob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.StartGameNty.prototype.setFirstRob = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.StartGameNty.prototype.clearFirstRob = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StartGameNty.prototype.hasFirstRob = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CardInfo cards = 2;
 * @return {!Array.<!proto.CardInfo>}
 */
proto.StartGameNty.prototype.getCardsList = function() {
  return /** @type{!Array.<!proto.CardInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CardInfo, 2));
};


/** @param {!Array.<!proto.CardInfo>} value */
proto.StartGameNty.prototype.setCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.CardInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CardInfo}
 */
proto.StartGameNty.prototype.addCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.CardInfo, opt_index);
};


proto.StartGameNty.prototype.clearCardsList = function() {
  this.setCardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CardInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CardInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CardInfo.displayName = 'proto.CardInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CardInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.CardInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CardInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CardInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    val: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CardInfo}
 */
proto.CardInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CardInfo;
  return proto.CardInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CardInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CardInfo}
 */
proto.CardInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CardInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CardInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CardInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CardInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.CardInfo.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CardInfo.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.CardInfo.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CardInfo.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 val = 2;
 * @return {number}
 */
proto.CardInfo.prototype.getVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.CardInfo.prototype.setVal = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.CardInfo.prototype.clearVal = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CardInfo.prototype.hasVal = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RobLandReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RobLandReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RobLandReq.displayName = 'proto.RobLandReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RobLandReq.prototype.toObject = function(opt_includeInstance) {
  return proto.RobLandReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RobLandReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobLandReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    score: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RobLandReq}
 */
proto.RobLandReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RobLandReq;
  return proto.RobLandReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RobLandReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RobLandReq}
 */
proto.RobLandReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RobLandReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RobLandReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RobLandReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobLandReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 score = 1;
 * @return {number}
 */
proto.RobLandReq.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.RobLandReq.prototype.setScore = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.RobLandReq.prototype.clearScore = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RobLandReq.prototype.hasScore = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RobLandRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RobLandRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RobLandRsp.displayName = 'proto.RobLandRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RobLandRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.RobLandRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RobLandRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobLandRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    rspHead: (f = msg.getRspHead()) && proto.RspHead.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RobLandRsp}
 */
proto.RobLandRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RobLandRsp;
  return proto.RobLandRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RobLandRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RobLandRsp}
 */
proto.RobLandRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RspHead;
      reader.readMessage(value,proto.RspHead.deserializeBinaryFromReader);
      msg.setRspHead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RobLandRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RobLandRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RobLandRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobLandRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRspHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RspHead.serializeBinaryToWriter
    );
  }
};


/**
 * optional RspHead rsp_head = 1;
 * @return {?proto.RspHead}
 */
proto.RobLandRsp.prototype.getRspHead = function() {
  return /** @type{?proto.RspHead} */ (
    jspb.Message.getWrapperField(this, proto.RspHead, 1));
};


/** @param {?proto.RspHead|undefined} value */
proto.RobLandRsp.prototype.setRspHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.RobLandRsp.prototype.clearRspHead = function() {
  this.setRspHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RobLandRsp.prototype.hasRspHead = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeskUpdateNty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DeskUpdateNty.repeatedFields_, null);
};
goog.inherits(proto.DeskUpdateNty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeskUpdateNty.displayName = 'proto.DeskUpdateNty';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DeskUpdateNty.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeskUpdateNty.prototype.toObject = function(opt_includeInstance) {
  return proto.DeskUpdateNty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeskUpdateNty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeskUpdateNty.toObject = function(includeInstance, msg) {
  var f, obj = {
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.PlayerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeskUpdateNty}
 */
proto.DeskUpdateNty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeskUpdateNty;
  return proto.DeskUpdateNty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeskUpdateNty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeskUpdateNty}
 */
proto.DeskUpdateNty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PlayerInfo;
      reader.readMessage(value,proto.PlayerInfo.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeskUpdateNty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeskUpdateNty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeskUpdateNty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeskUpdateNty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlayerInfo players = 1;
 * @return {!Array.<!proto.PlayerInfo>}
 */
proto.DeskUpdateNty.prototype.getPlayersList = function() {
  return /** @type{!Array.<!proto.PlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PlayerInfo, 1));
};


/** @param {!Array.<!proto.PlayerInfo>} value */
proto.DeskUpdateNty.prototype.setPlayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PlayerInfo}
 */
proto.DeskUpdateNty.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PlayerInfo, opt_index);
};


proto.DeskUpdateNty.prototype.clearPlayersList = function() {
  this.setPlayersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RobLandInfoNty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RobLandInfoNty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RobLandInfoNty.displayName = 'proto.RobLandInfoNty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RobLandInfoNty.prototype.toObject = function(opt_includeInstance) {
  return proto.RobLandInfoNty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RobLandInfoNty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobLandInfoNty.toObject = function(includeInstance, msg) {
  var f, obj = {
    preSeatNo: jspb.Message.getField(msg, 1),
    preScore: jspb.Message.getField(msg, 2),
    currentScore: jspb.Message.getField(msg, 3),
    nextSeat: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RobLandInfoNty}
 */
proto.RobLandInfoNty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RobLandInfoNty;
  return proto.RobLandInfoNty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RobLandInfoNty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RobLandInfoNty}
 */
proto.RobLandInfoNty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreSeatNo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPreScore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentScore(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextSeat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RobLandInfoNty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RobLandInfoNty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RobLandInfoNty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobLandInfoNty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string pre_seat_no = 1;
 * @return {string}
 */
proto.RobLandInfoNty.prototype.getPreSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RobLandInfoNty.prototype.setPreSeatNo = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.RobLandInfoNty.prototype.clearPreSeatNo = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RobLandInfoNty.prototype.hasPreSeatNo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 pre_score = 2;
 * @return {number}
 */
proto.RobLandInfoNty.prototype.getPreScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.RobLandInfoNty.prototype.setPreScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.RobLandInfoNty.prototype.clearPreScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RobLandInfoNty.prototype.hasPreScore = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 current_score = 3;
 * @return {number}
 */
proto.RobLandInfoNty.prototype.getCurrentScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.RobLandInfoNty.prototype.setCurrentScore = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.RobLandInfoNty.prototype.clearCurrentScore = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RobLandInfoNty.prototype.hasCurrentScore = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string next_seat = 4;
 * @return {string}
 */
proto.RobLandInfoNty.prototype.getNextSeat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.RobLandInfoNty.prototype.setNextSeat = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.RobLandInfoNty.prototype.clearNextSeat = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RobLandInfoNty.prototype.hasNextSeat = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetLandLordNty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SetLandLordNty.repeatedFields_, null);
};
goog.inherits(proto.SetLandLordNty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetLandLordNty.displayName = 'proto.SetLandLordNty';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SetLandLordNty.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetLandLordNty.prototype.toObject = function(opt_includeInstance) {
  return proto.SetLandLordNty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetLandLordNty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetLandLordNty.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentScore: jspb.Message.getField(msg, 1),
    landLordSeatNo: jspb.Message.getField(msg, 2),
    hiddenCardsList: jspb.Message.toObjectList(msg.getHiddenCardsList(),
    proto.CardInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetLandLordNty}
 */
proto.SetLandLordNty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetLandLordNty;
  return proto.SetLandLordNty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetLandLordNty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetLandLordNty}
 */
proto.SetLandLordNty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentScore(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLandLordSeatNo(value);
      break;
    case 3:
      var value = new proto.CardInfo;
      reader.readMessage(value,proto.CardInfo.deserializeBinaryFromReader);
      msg.addHiddenCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetLandLordNty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetLandLordNty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetLandLordNty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetLandLordNty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHiddenCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.CardInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 current_score = 1;
 * @return {number}
 */
proto.SetLandLordNty.prototype.getCurrentScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SetLandLordNty.prototype.setCurrentScore = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SetLandLordNty.prototype.clearCurrentScore = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetLandLordNty.prototype.hasCurrentScore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string land_lord_seat_no = 2;
 * @return {string}
 */
proto.SetLandLordNty.prototype.getLandLordSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SetLandLordNty.prototype.setLandLordSeatNo = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SetLandLordNty.prototype.clearLandLordSeatNo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SetLandLordNty.prototype.hasLandLordSeatNo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CardInfo hidden_cards = 3;
 * @return {!Array.<!proto.CardInfo>}
 */
proto.SetLandLordNty.prototype.getHiddenCardsList = function() {
  return /** @type{!Array.<!proto.CardInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CardInfo, 3));
};


/** @param {!Array.<!proto.CardInfo>} value */
proto.SetLandLordNty.prototype.setHiddenCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.CardInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CardInfo}
 */
proto.SetLandLordNty.prototype.addHiddenCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.CardInfo, opt_index);
};


proto.SetLandLordNty.prototype.clearHiddenCardsList = function() {
  this.setHiddenCardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayCardReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PlayCardReq.repeatedFields_, null);
};
goog.inherits(proto.PlayCardReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlayCardReq.displayName = 'proto.PlayCardReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PlayCardReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayCardReq.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayCardReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayCardReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayCardReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardsList: jspb.Message.toObjectList(msg.getCardsList(),
    proto.CardInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayCardReq}
 */
proto.PlayCardReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayCardReq;
  return proto.PlayCardReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayCardReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayCardReq}
 */
proto.PlayCardReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CardInfo;
      reader.readMessage(value,proto.CardInfo.deserializeBinaryFromReader);
      msg.addCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayCardReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayCardReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayCardReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayCardReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.CardInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CardInfo cards = 1;
 * @return {!Array.<!proto.CardInfo>}
 */
proto.PlayCardReq.prototype.getCardsList = function() {
  return /** @type{!Array.<!proto.CardInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CardInfo, 1));
};


/** @param {!Array.<!proto.CardInfo>} value */
proto.PlayCardReq.prototype.setCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.CardInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CardInfo}
 */
proto.PlayCardReq.prototype.addCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.CardInfo, opt_index);
};


proto.PlayCardReq.prototype.clearCardsList = function() {
  this.setCardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayCardRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayCardRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlayCardRsp.displayName = 'proto.PlayCardRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayCardRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayCardRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayCardRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayCardRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    rspHead: (f = msg.getRspHead()) && proto.RspHead.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayCardRsp}
 */
proto.PlayCardRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayCardRsp;
  return proto.PlayCardRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayCardRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayCardRsp}
 */
proto.PlayCardRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RspHead;
      reader.readMessage(value,proto.RspHead.deserializeBinaryFromReader);
      msg.setRspHead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayCardRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayCardRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayCardRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayCardRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRspHead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RspHead.serializeBinaryToWriter
    );
  }
};


/**
 * optional RspHead rsp_head = 1;
 * @return {?proto.RspHead}
 */
proto.PlayCardRsp.prototype.getRspHead = function() {
  return /** @type{?proto.RspHead} */ (
    jspb.Message.getWrapperField(this, proto.RspHead, 1));
};


/** @param {?proto.RspHead|undefined} value */
proto.PlayCardRsp.prototype.setRspHead = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PlayCardRsp.prototype.clearRspHead = function() {
  this.setRspHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayCardRsp.prototype.hasRspHead = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayCardNty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PlayCardNty.repeatedFields_, null);
};
goog.inherits(proto.PlayCardNty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlayCardNty.displayName = 'proto.PlayCardNty';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PlayCardNty.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayCardNty.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayCardNty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayCardNty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayCardNty.toObject = function(includeInstance, msg) {
  var f, obj = {
    preSeatNo: jspb.Message.getField(msg, 1),
    nextSeatNo: jspb.Message.getField(msg, 2),
    rate: jspb.Message.getField(msg, 3),
    cardsList: jspb.Message.toObjectList(msg.getCardsList(),
    proto.CardInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayCardNty}
 */
proto.PlayCardNty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayCardNty;
  return proto.PlayCardNty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayCardNty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayCardNty}
 */
proto.PlayCardNty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreSeatNo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextSeatNo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRate(value);
      break;
    case 4:
      var value = new proto.CardInfo;
      reader.readMessage(value,proto.CardInfo.deserializeBinaryFromReader);
      msg.addCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayCardNty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayCardNty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayCardNty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayCardNty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.CardInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string pre_seat_no = 1;
 * @return {string}
 */
proto.PlayCardNty.prototype.getPreSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.PlayCardNty.prototype.setPreSeatNo = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.PlayCardNty.prototype.clearPreSeatNo = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayCardNty.prototype.hasPreSeatNo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string next_seat_no = 2;
 * @return {string}
 */
proto.PlayCardNty.prototype.getNextSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.PlayCardNty.prototype.setNextSeatNo = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.PlayCardNty.prototype.clearNextSeatNo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayCardNty.prototype.hasNextSeatNo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 rate = 3;
 * @return {number}
 */
proto.PlayCardNty.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.PlayCardNty.prototype.setRate = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.PlayCardNty.prototype.clearRate = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PlayCardNty.prototype.hasRate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated CardInfo cards = 4;
 * @return {!Array.<!proto.CardInfo>}
 */
proto.PlayCardNty.prototype.getCardsList = function() {
  return /** @type{!Array.<!proto.CardInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CardInfo, 4));
};


/** @param {!Array.<!proto.CardInfo>} value */
proto.PlayCardNty.prototype.setCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.CardInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CardInfo}
 */
proto.PlayCardNty.prototype.addCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.CardInfo, opt_index);
};


proto.PlayCardNty.prototype.clearCardsList = function() {
  this.setCardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameOverNty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GameOverNty.repeatedFields_, null);
};
goog.inherits(proto.GameOverNty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameOverNty.displayName = 'proto.GameOverNty';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GameOverNty.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameOverNty.prototype.toObject = function(opt_includeInstance) {
  return proto.GameOverNty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameOverNty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameOverNty.toObject = function(includeInstance, msg) {
  var f, obj = {
    winnerSeatNo: jspb.Message.getField(msg, 1),
    landLordSeatNo: jspb.Message.getField(msg, 2),
    currentScore: jspb.Message.getField(msg, 3),
    rate: jspb.Message.getField(msg, 4),
    cardsList: jspb.Message.toObjectList(msg.getCardsList(),
    proto.CardInfo.toObject, includeInstance),
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.PlayerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameOverNty}
 */
proto.GameOverNty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameOverNty;
  return proto.GameOverNty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameOverNty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameOverNty}
 */
proto.GameOverNty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWinnerSeatNo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLandLordSeatNo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentScore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRate(value);
      break;
    case 5:
      var value = new proto.CardInfo;
      reader.readMessage(value,proto.CardInfo.deserializeBinaryFromReader);
      msg.addCards(value);
      break;
    case 6:
      var value = new proto.PlayerInfo;
      reader.readMessage(value,proto.PlayerInfo.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameOverNty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameOverNty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameOverNty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameOverNty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.CardInfo.serializeBinaryToWriter
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.PlayerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string winner_seat_no = 1;
 * @return {string}
 */
proto.GameOverNty.prototype.getWinnerSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GameOverNty.prototype.setWinnerSeatNo = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameOverNty.prototype.clearWinnerSeatNo = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameOverNty.prototype.hasWinnerSeatNo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string land_lord_seat_no = 2;
 * @return {string}
 */
proto.GameOverNty.prototype.getLandLordSeatNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.GameOverNty.prototype.setLandLordSeatNo = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameOverNty.prototype.clearLandLordSeatNo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameOverNty.prototype.hasLandLordSeatNo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string current_score = 3;
 * @return {string}
 */
proto.GameOverNty.prototype.getCurrentScore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.GameOverNty.prototype.setCurrentScore = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.GameOverNty.prototype.clearCurrentScore = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameOverNty.prototype.hasCurrentScore = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 rate = 4;
 * @return {number}
 */
proto.GameOverNty.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GameOverNty.prototype.setRate = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GameOverNty.prototype.clearRate = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameOverNty.prototype.hasRate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated CardInfo cards = 5;
 * @return {!Array.<!proto.CardInfo>}
 */
proto.GameOverNty.prototype.getCardsList = function() {
  return /** @type{!Array.<!proto.CardInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CardInfo, 5));
};


/** @param {!Array.<!proto.CardInfo>} value */
proto.GameOverNty.prototype.setCardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.CardInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CardInfo}
 */
proto.GameOverNty.prototype.addCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.CardInfo, opt_index);
};


proto.GameOverNty.prototype.clearCardsList = function() {
  this.setCardsList([]);
};


/**
 * repeated PlayerInfo players = 6;
 * @return {!Array.<!proto.PlayerInfo>}
 */
proto.GameOverNty.prototype.getPlayersList = function() {
  return /** @type{!Array.<!proto.PlayerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PlayerInfo, 6));
};


/** @param {!Array.<!proto.PlayerInfo>} value */
proto.GameOverNty.prototype.setPlayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.PlayerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PlayerInfo}
 */
proto.GameOverNty.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.PlayerInfo, opt_index);
};


proto.GameOverNty.prototype.clearPlayersList = function() {
  this.setPlayersList([]);
};


/**
 * @enum {number}
 */
proto.Cmd = {
  KHANDSAKEREQ: 257,
  KHANDSHAKERSP: 258,
  KHEARTTICKREQ: 1281,
  KHEARTTICKRSP: 1282,
  KSERVERSTART: 4096,
  KSERVERUSERREGISTERDISCONNECTED: 4097,
  KSERVERUSERDISCONNECTED: 4098,
  KSERVEREND: 65535,
  KLANDLORDSTART: 65536,
  KLANDLORDJOINGAMEREQ: 65537,
  KLANDLORDJOINGAMERSP: 65538,
  KLANDLORDREADYGAMEREQ: 65539,
  KLANDLORDREADYGAMERSP: 65540,
  KLANDLORDROBLANDREQ: 65541,
  KLANDLORDROBLANDRSP: 65542,
  KLANDLORDPLAYCARDREQ: 65543,
  KLANDLORDPLAYCARDRSP: 65544,
  KLANDLORDREQCURDESKINFO: 65545,
  KLANDLORDSTARTGAMEREQ: 65546,
  KLANDLORDSTARTGAMERSP: 65547,
  KLANDLORDDESKUPDATENTY: 73728,
  KLANDLORDSTARTGAMENTY: 73730,
  KLANDLORDROBLANDNTY: 73732,
  KLANDLORDSETLANDLORDNTY: 73734,
  KLANDLORDPLAYCARDNTY: 73736,
  KLANDLORDGAMEOVERNTY: 73738,
  KLANDLORDGAMENOLORDNTY: 73740,
  KLANDLORDINITDESKNTY: 73742,
  KLANDLORDEND: 131071
};

/**
 * @enum {number}
 */
proto.ErrCode = {
  KLANDLORDSCOREERR: 65537,
  KLANDLORDPLAYCARDERR: 65538,
  KLANDLORDUSERNOTJOIN: 65539,
  KLANDLORDUSEREXITS: 65540,
  KLANDLORDDESKEXITS: 65541,
  KLANDLORDROBLORDSEATERR: 65542
};

/**
 * @enum {number}
 */
proto.PlayerStatus = {
  NORMAL: 1,
  LEAVE: 2,
  OFFLINE: 3
};

/**
 * @enum {number}
 */
proto.DeskStatus = {
  READY: 1,
  ROBLORAD: 2,
  PLAYCARD: 3
};

goog.object.extend(exports, proto);
